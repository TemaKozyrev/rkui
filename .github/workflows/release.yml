name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: rkui ${{ github.ref_name }}
          draft: false
          prerelease: false

  build:
    name: Build and Upload (${{ matrix.os }})
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-14-arm64]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Update versions from tag
        run: |
          TAG="${GITHUB_REF_NAME:-${{ github.ref_name }}}"
          VERSION="${TAG#v}"
          export VERSION
          echo "Release tag: '${TAG}'"
          echo "Computed version: '${VERSION}'"
          if [ -z "${VERSION}" ]; then
            echo "VERSION is empty; aborting" >&2
            exit 1
          fi
          # Validate semver-like pattern (basic)
          if ! echo "${VERSION}" | grep -Eq '^[0-9]+\.[0-9]+\.[0-9]+'; then
            echo "Tag '${TAG}' does not contain a semver prefix like X.Y.Z" >&2
            exit 1
          fi

          node <<'NODE'
          const fs = require('fs');
          const version = process.env.VERSION;
          // Update tauri.conf.json
          const tauriPath = 'tauri.conf.json';
          let tj = JSON.parse(fs.readFileSync(tauriPath, 'utf8'));
          tj.version = version;
          fs.writeFileSync(tauriPath, JSON.stringify(tj, null, 2) + '\n');
          console.log(`Updated ${tauriPath} to version ${version}`);

          // Update Cargo.toml in [package] section only
          const cargoPath = 'Cargo.toml';
          let toml = fs.readFileSync(cargoPath, 'utf8');
          const pkgStart = toml.indexOf('[package]');
          if (pkgStart === -1) {
            throw new Error('No [package] section found in Cargo.toml');
          }
          const rest = toml.slice(pkgStart + '[package]'.length);
          const nextSectionRel = rest.indexOf('\n[');
          const sectionEnd = nextSectionRel === -1 ? toml.length : (pkgStart + '[package]'.length + nextSectionRel);
          const before = toml.slice(0, pkgStart);
          let section = toml.slice(pkgStart, sectionEnd);

          if (/^([\s\S]*?)(\nversion\s*=\s*"[^"]+")/m.test(section)) {
            section = section.replace(/(\n)version\s*=\s*"[^"]+"/, `$1version = "${version}"`);
          } else {
            // Insert version under the [package] header
            section = section.replace(/\[package\][^\n]*\n/, (m) => m + `version = "${version}"\n`);
          }
          const after = toml.slice(sectionEnd);
          fs.writeFileSync(cargoPath, before + section + after);
          console.log(`Updated ${cargoPath} to version ${version}`);
          NODE

          echo "--- Diff after version bump ---"
          git diff -- tauri.conf.json Cargo.toml || true

      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            patchelf \
            pkg-config \
            libssl-dev \
            libsasl2-dev \
            zlib1g-dev \
            libzstd-dev \
            librdkafka-dev \
            cmake
          # WebKitGTK: try 4.1 first (Ubuntu 24.04+), fallback to 4.0 on older images
          sudo apt-get install -y libwebkit2gtk-4.1-dev || sudo apt-get install -y libwebkit2gtk-4.0-dev

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: |
            aarch64-apple-darwin
            x86_64-apple-darwin 


      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: |
            web/package-lock.json

      - name: Install frontend dependencies
        run: npm ci --prefix web

      - name: Build and upload with Tauri
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}
          args: --target universal-apple-darwi
          releaseDraft: false
          prerelease: false
